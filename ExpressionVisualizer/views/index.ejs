<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>

        body {
            font: 10px sans-serif;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }

        .x.axis path {
            display: none;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        .legend rect {
            fill:white;
            stroke:black;
            opacity:0.8;}

    </style>

    <link rel='stylesheet' href='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css'>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js'></script>
    <script>
        (function() {
            d3.legend = function(g) {
                g.each(function() {
                    var g= d3.select(this),
                            items = {},
                            svg = d3.select(g.property("nearestViewportElement")),
                            legendPadding = g.attr("data-style-padding") || 5,
                            lb = g.selectAll(".legend-box").data([true]),
                            li = g.selectAll(".legend-items").data([true])

                    lb.enter().append("rect").classed("legend-box",true)
                    li.enter().append("g").classed("legend-items",true)

                    svg.selectAll("[data-legend]").each(function() {
                        var self = d3.select(this)
                        items[self.attr("data-legend")] = {
                            pos : self.attr("data-legend-pos") || this.getBBox().y,
                            color : self.attr("data-legend-color") != undefined ? self.attr("data-legend-color") : self.style("fill") != 'none' ? self.style("fill") : self.style("stroke")
                        }
                    })

                    items = d3.entries(items).sort(function(a,b) { return a.value.pos-b.value.pos})


                    li.selectAll("text")
                            .data(items,function(d) { return d.key})
                            .call(function(d) { d.enter().append("text")})
                            .call(function(d) { d.exit().remove()})
                            .attr("y",function(d,i) { return i+"em"})
                            .attr("x","1em")
                            .text(function(d) { ;return d.key})

                    li.selectAll("circle")
                            .data(items,function(d) { return d.key})
                            .call(function(d) { d.enter().append("circle")})
                            .call(function(d) { d.exit().remove()})
                            .attr("cy",function(d,i) { return i-0.25+"em"})
                            .attr("cx",0)
                            .attr("r","0.4em")
                            .style("fill",function(d) { console.log(d.value.color);return d.value.color})

                    // Reposition and resize the box
                    var lbbox = li[0][0].getBBox()
                    lb.attr("x",(lbbox.x-legendPadding))
                            .attr("y",(lbbox.y-legendPadding))
                            .attr("height",(lbbox.height+2*legendPadding))
                            .attr("width",(lbbox.width+2*legendPadding))
                })
                return g
            }
        })()

        $(document).ready(function () {
            $.get('data/Users', function (data) {
                $('#selectUser').append($('<option>', {
                    value: "",
                    text: ""
                }));
                $.each(data, function (i, item) {
                    $('#selectUser').append($('<option>', {
                        value: item.objectId,
                        text: item.username
                    }));
                });
                // set here your svg properties
            });
            $('#selectUser').change(function () {
                        var val1 = $('#selectUser option:selected').val();
                        $('#selectSurvey').empty();
                        $('#selectSurvey').append($('<option>', {
                            value: "",
                            text: ""
                        }));
                        if(val1 === ""){
                            return;
                        }
                        $('#selectSurvey').show();
                        $.get('data/Surveys/' + val1, function (data) {
                            $.each(data, function (i, item) {
                                $('#selectSurvey').append($('<option>', {
                                    value: item.objectId,
                                    text: item.createdat
                                }));
                            });
                        });

                    }
            );

            $('#selectSurvey').change(function () {
                        var val1 = $('#selectSurvey option:selected').val();
                        if(val1 === ""){
                            return;
                        }
                        $.get('data/SurveyData/' + val1, function (data) {
                            var margin = {top: 20, right: 80, bottom: 30, left: 50},
                                    width = 960 - margin.left - margin.right,
                                    height = 500 - margin.top - margin.bottom;

                            var parseDate = d3.time.format("%Y-%m-%dT%H:%M:%S.%LZ").parse;

                            var x = d3.time.scale()
                                    .range([0, width]);

                            var y = d3.scale.linear()
                                    .range([height, 0]);

                            var color = d3.scale.category10();

                            var xAxis = d3.svg.axis()
                                    .scale(x)
                                    .orient("bottom");

                            var yAxis = d3.svg.axis()
                                    .scale(y)
                                    .orient("left");

                            var line = d3.svg.line()
                                    .interpolate("basis")
                                    .x(function(d) { return x(d.time); })
                                    .y(function(d) { return y(d.emotionScore); });

                            var svg = d3.select("#chart").insert("svg",":first-child")
                                    .attr("width", width + margin.left + margin.right)
                                    .attr("height", height + margin.top + margin.bottom)
                                    .append("g")
                                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


                            color.domain(d3.keys(data[0].score));

                            data.forEach(function(d) {
                                d.time = parseDate(d.datetime);
                            });

                            var cities = color.domain().map(function(name) {
                                return {
                                    name: name,
                                    values: data.map(function(d) {
                                        return {time: d.time, emotionScore: +d.score[name]};
                                    })
                                };
                            });

                            x.domain(d3.extent(data, function(d) { return d.time; }));

                            y.domain([
                                d3.min(cities, function(c) { return d3.min(c.values, function(v) { return v.emotionScore; }); }),
                                d3.max(cities, function(c) { return d3.max(c.values, function(v) { return v.emotionScore; }); })
                            ]);

                            svg.append("g")
                                    .attr("class", "x axis")
                                    .attr("transform", "translate(0," + height + ")")
                                    .call(xAxis);

                            svg.append("g")
                                    .attr("class", "y axis")
                                    .call(yAxis)
                                    .append("text")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", 6)
                                    .attr("dy", ".71em")
                                    .style("text-anchor", "end")
                                    .text("Emotion Score (??F)");

                            var city = svg.selectAll(".city")
                                    .data(cities)
                                    .enter().append("g")
                                    .attr("class", "city");

                            city.append("path")
                                    .attr("class", "line")
                                    .attr("d", function(d) { return line(d.values); })
                                    .attr("data-legend",function(d) { return d.name})
                                    .style("stroke", function(d) { return color(d.name); });

                            /*city.append("text")
                                    .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
                                    .attr("transform", function(d) { return "translate(" + x(d.value.time) + "," + y(d.value.emotionScore) + ")"; })
                                    .attr("x", 3)
                                    .attr("dy", ".35em")
                                    .text(function(d) { return d.name; });*/
                            legend = svg.append("g")
                                    .attr("class","legend")
                                    .attr("transform","translate(50,30)")
                                    .style("font-size","12px")
                                    .call(d3.legend);

/*                            setTimeout(function() {
                                legend
                                        .style("font-size","20px")
                                        .attr("data-style-padding",10)
                                        .call(d3.legend)
                            },1000)
*/
                        });
                    }
            );


        });


    </script>
</head>
<body>
<h3> Visualizations of the survey </h3>
    <select id="selectUser" >
    </select>

    <select id="selectSurvey">
    </select>
<div id="chart">

</div>
<div id="jsonDataDisplay">
    </div>
</body>
</html>
